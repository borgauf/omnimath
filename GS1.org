# # -*- mode: org -*- coding: utf-8 -*-
#+TITLE: Haskell Road; Getting Started Part 1
#+AUTHOR:
#+EMAIL: 
#+DATE: 
#+LANGUAGE:  en
# #+INFOJS_OPT: view:showall ltoc:t mouse:underline
#+HTML_HEAD: <link rel="stylesheet" href="./tufte.css" type="text/css">
#+INCLUDE: "./header.org" :minlevel 1
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_FILE_NAME: HRGettingStarted1.html
#+OPTIONS: H:15 num:nil toc:nil \n:nil @:t ::t |:t _:{} *:t ^:{} prop:nil
#+OPTIONS: tex:t
#+OPTIONS: html-postamble:nil
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [american]
# Setup tikz package for both LaTeX and HTML export:
#+LATEX_HEADER: \usepackqqqage{tikz}
#+LATEX_HEADER: \usepackage{commath}
#+LaTeX_HEADER: \usepackage{pgfplots}
#+LaTeX_HEADER: \usepackage{sansmath}
#+LaTeX_HEADER: \usepackage{mathtools}
#+PROPERTY: header-args:latex+ :packages '(("" "tikz"))
#
#+PROPERTY: header-args:latex+ :exports results :fit yes
#
#+STARTUP: showall
#+STARTUP: align
#+STARTUP: indent
#+STARTUP: shrink
# This makes MathJax/LaTeX appear in buffer (UTF-8)
#+STARTUP: entitiespretty
# #+STARTUP: logdrawer # This makes pictures appear in buffer
#+STARTUP: inlineimages
#+STARTUP: fnadjust
# #+OPTIONS: html-style:nil
#+html_head_extra: <style> .title { display: none; } </style>
#+html_head_extra: <style> caption.t-bottom { caption-side: bottom; } </style>

* Getting started part 1

** Bibliography :noexport:
:PROPERTIES:
:header-args: :dir "/home/galaxybeing/Dropbox/org/omnimath"
:END:
:RESOURCES:
- [[bibliography:~/Dropbox/org/biblio/ref.bib][Bibliography]]
- [[cite:&doets2012haskell]]
:END:

** Not exported :noexport:

#+begin_src haskell :eval never :exports code :tangle ./src/gs1.hs :noweb yes
module GS1 where


<<23dd7da9-8620-471f-8642-f854785656ea>>
#+end_src

#+name: 6b14996d-7528-4c2a-a081-ccd244799b49
#+begin_src haskell :results verbatim :exports both
1 + 1
#+end_src

#+RESULTS: 6b14996d-7528-4c2a-a081-ccd244799b49
: ghci> 2


* Monday at the library part 1

** Fractions

It's a Monday morning in late July and the von der Surwitz siblings
meet in a reserved study room at the main university library to go
over what their /Introduction to Computer Science/ teacher, Professor
Chandra, had discussed with them at the Novalis Tech Open House.

Checking Professor Chandra's course syllabus on her website before,
they had already made online purchases of the main text for the
course, /The Haskell Road to Logic, Maths and Programming/ by Kees
Doets and Jan van Eijck. During the open house at the convention wing
of the student center on the previous Saturday, they had sat down
together at a table with the professor as she paged through the text
and talked extemporaneously about what parts she would like to handle
and how. She also showed them some code on her laptop. She invited
them to email her with any questions.

The professor encouraged them to dive into to the logic and sets
prereqs, alongside of the first few chapters of /The Haskell Road.../,
as well as to get through as much /Learn You a Haskell.../ as
possible.

Ursula von der Surwitz has plugged in her laptop to the room's big 4K
monitor and is scrolling through some of her personal notes.


@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ So like
Professor Chandra said on Saturday, we're going to rely heavily on
logic and set theory. \\
[murmurs of agreement and then silence] \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [continuing] It
seems a bit ominous. \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ Out with the old
math, in with the new. \\
[nods and agreement] \\
@@html:<span class="fraktur">@@𝔘𝔱𝔢::@@html:</span>@@ But like she was
saying, comp-sci math is sort of a grab-bag of higher math, it's bits
and pieces of what you'd be learning as a math major after all the
calculus and differential equations and linear algebra. \\
[murmurs of agreement] \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ Like the examples
she gave, you need set theory to properly define relations and
functions. \\
[more agreement murmurs] \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ Well, like
Vati[fn:1] said, his math degree really smoothed the way for his
chemical engineering studies. \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ Get as much math
as you can as early as you can. That seems to be the plan everywhere
these days. \\
[murmurs of agreement] \\
@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ So I'm psyched. \\
[She looks around and receives nods] \\
@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ [continuing] I'm
psyched because --- as she said --- this course is totally
experimental and open-ended. She's basically going to give us what
she'd be giving her college freshman and sophomores in the CS
department. And because she's on sabbatical, she's giving us her total
undivided attention.\\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ Amazing. It's only
us, her daughter --- and maybe three others who weren't there and
might not take it after all. Wow.\\
@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ Bottom line: We've
got a once-in-a-lifetime chance to really learn a ton about
comp-sci. Yeah, psyched! \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ Now all we have to do
is hang on for dear life! \\
[laughter] \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [paging through
/Haskell Road.../ ] Did anyone look at the first chapter? \\
[affirmative nods] \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [continuing]
Wasn't too bad --- once I caught on to what he was saying. But I have
to say, the /Learn You a Haskell.../ helped. \\
[murmurs of agreement] \\
@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ I think it's cool
how the whole prime number test, the greatest common divisor all
blended together. \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ But I'm glad I'd
seen the prime factorization way of figuring out unlike-denominator
math back in Kiel. /If/ I can remember it. \\
[affirmative murmurs] \\
@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ Oh, by the way,
does anyone remember why the Greeks said, for example, $7$ /measures/
$35\;$?  \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ Wasn't that
because a rod or measuring tape that's $7$ units long can then measure
out a length of $35$ perfectly? \\
[murmurs of agreement] \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ Well, I
remember prime factorization was based on the [[https://en.wikipedia.org/wiki/Fundamental_theorem_of_arithmetic][Fundamental Theorem of
Arithmetic]] from dear old Euclid. [bringing up the Wikipedia article
in both English and German, reading from the English page] /If a prime
$p$ divides the product $a \cdot b$, then $p$ divides either $a$ or $b$ or
both/. And that really means [reading on] /Every positive integer $n >
1$ can be represented in exactly one way as a product of prime
powers/. Got that? [pulling an ironic face] Do you see how the first
and second statements are equivalent? \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ [also ironically]
Oh sure, of course. \\
[laughter] \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ And here's the
proof. [half-mumbling the German page's proof] It's a contradiction
proof. Our favorite. \\
[laughter] \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ Oh, right. That's
where you take off at top speed at a brick wall, smash into brick
wall, die ... and that proves you should have gone exactly the
opposite direction. \\
[laughter] \\
@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ Wasn't it amazing
how Professor Chandra just put two fractions with huge unlike
denominators into the Racket command line[fn:2]. Did anybody besides
me install it? \\
[affirmative murmurs] \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [bringing up
Racket in a terminal] Here, I'll just try something. [typing] \\

#+begin_example
> (+ 1/15 1/85)
4/51
#+end_example

@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ I see you learned
the prefix way of doing Racket. \\
[Ursula nods.] \\
@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ [going to the
whiteboard] I'll put the prime factorization method down just to
refresh my memory. [writing] So $15$ is multiplying prime numbers $3$
and $5$, and $85$ is multiplying primes $5$ and $17$ together. Now
we've got the primes. I'll make a table of them

#+CAPTION: 15 factored into its primes
#+ATTR_HTML: :border 2 :rules all :frame border
| $\quad$ 15 $\quad$ | $\quad$ 2 $\quad$ | $\quad$ 3 $\quad$ | $\quad$ 5 $\quad$ |
|--------------------+-------------------+-------------------+-------------------|
|                    |                   |                 1 |                 1 |

#+CAPTION: 85 factored into its primes
#+ATTR_HTML: :border 2 :rules all :frame border
| $\quad$ 85 $\quad$ | $\;$ 2 $\;$ | $\;$ 3 $\;$ | $\;$ 5 $\;$ | $\;$ 7 $\;$ | $\;$ 11 $\;$ | $\;$ 13 $\;$ | $\;$ 17 $\;$ |
|--------------------+-------------+-------------+-------------+-------------+--------------+--------------+--------------|
|                    |             |             |           1 |             |              |              |            1 |

@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ [continuing] So we
take the unique primes in common between the two denominators --- that
would be $3\;$, $5\;$, and $17\:$ and multiply them together to
get... \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [typing into
Racket] That gives us $255\;$. \\
@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ So now $255$ will
be the common denominator. But we have to calculate the ratios
[writing] \\

\begin{align*}
\frac{1}{15} &= \frac{x}{255} \\[.5em]
\frac{1}{85} &= \frac{y}{255}
\end{align*}

@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [tabbing over
to her org-mode buffer] Here, let me write a little Haskell function
for that, a proverbial one-liner doing --- /Dreisatz/? What's
/Dreisatz?/ \\
@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ Ah, literally
/rule of three./ \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [Ursula looks
it up on Wikipedia] Or just /cross-multiplication/. [typing into a
org-mode Babel source block] \\

#+name: 23dd7da9-8620-471f-8642-f854785656ea
#+begin_src haskell :eval never :exports code
crossMult = \a b d -> ((a * d) / b) -- a/b = x/d ... solve for unknown
#+end_src

[running it with parameters] \\

#+name: 1dda17f3-87d8-4230-b330-08ff82c41fac
#+begin_src haskell :results verbatim :exports both
crossMult 1 15 255
#+end_src

#+RESULTS: 1dda17f3-87d8-4230-b330-08ff82c41fac
: 17.0

@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ So you're doing an
anonymous function[fn:3], right? \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ Right. Yeah,
pretty neat, huh? \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ And you're not
worrying about doing a type declaration. \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ Not really. I
could. But I'm just letting Haskell figure it out. I'll get the /type/
with ~:t~ [typing at the REPL]

#+name: d2c4f05e-69bf-4675-b8ac-39641446523b
#+begin_src haskell :results verbatim :exports both
:t crossMult
#+end_src

#+RESULTS: d2c4f05e-69bf-4675-b8ac-39641446523b
: crossMult :: Double -> Double -> Double -> Double

@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [continuing]
Actually, I could have done it this way [typing in new source block]

#+name: 6a525824-c590-49c5-823b-e324005d9008
#+begin_src haskell :results silent :exports code
:{
crossMult2 :: Integer -> Integer -> Integer -> Integer  
crossMult2 = \a b d -> ((a * d) `div` b)
:}
#+end_src

#+name: d07dffef-6aa4-4c45-9251-6ed12573b706
#+begin_src haskell :results verbatim :exports both
crossMult2 1 85 255
#+end_src

#+RESULTS: d07dffef-6aa4-4c45-9251-6ed12573b706
: 3

@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ So you
specifically declared the type signature for your ~crossMult2~. And it
you specifically made it just ~Integer~ parameters producing an
~Integer~ answer. But then you're using ~div~? Why then? \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ Watch
this. [typing into REPL] I'll get some information on regular division
~/~ versus ~div~.

#+name: f676efe6-87a5-47d4-bd28-b20b51c40a08
#+begin_src haskell :results verbatim :exports both
:t (/)
#+end_src

#+RESULTS: f676efe6-87a5-47d4-bd28-b20b51c40a08
: (/) :: Fractional a => a -> a -> a

#+name: b231e9ac-e9f5-46a7-b6a8-c0199af961b7
#+begin_src haskell :results verbatim :exports both
:i (/)
#+end_src

#+RESULTS: b231e9ac-e9f5-46a7-b6a8-c0199af961b7
: type Fractional :: * -> Constraint
: class Num a => Fractional a where
:   (/) :: a -> a -> a
:   ...
:   	-- Defined in ‘GHC.Real’
: infixl 7 /

#+name: e91da85e-e384-437d-a2a2-db13935027be
#+begin_src haskell :results verbatim :exports both
:t div
#+end_src

#+RESULTS: e91da85e-e384-437d-a2a2-db13935027be
: div :: Integral a => a -> a -> a

@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ Wow. Still getting
used to reading that stuff. \\
[laughter] \\
@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ All right, so I'm
assuming they're calling the one type class [writing on the board]
~Fractional~ because that means literally something that's numerical
and not a whole number. And then the other [writing] ~Integral~ is
something related to an integer whole number. So basically, a type
class adds a property or trait to types. It's starting to get clearer
--- maybe. \\
[murmurs of agreement] \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ Let me go to a
link on [[https://stackoverflow.com/questions/35950600/why-it-is-impossible-to-divide-integer-number-in-haskell][stackoverflow]] that talks about this[fn:4]. Getting
there... [displays post on monitor] Right. So the original post has
this and wonders why the error

#+name: 6bce68f1-3fd7-48a8-a806-0037c32c40b5
#+begin_src haskell :results verbatim :exports both
(4 :: Integer) / 2
#+end_src

#+begin_example
<interactive>:36:16: error:
    • No instance for (Fractional Integer) arising from a use of ‘/’
    • In the expression: (4 :: Integer) / 2
      In an equation for ‘it’: it = (4 :: Integer) / 2
#+end_example

@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ I'm guessing it's
saying you can't do a regular /fractional/ divide because you've
specifically said this is an integer, right?  \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [getting up and
pointing on the monitor] Basically, yes. There's a type class called
~Fractional~ and it's saying that when we specifically make ~4~ an
~Integer~ this way [writing on the board] ~(4 :: Integer)~, that makes
it ineligible for doing regular /fractional/ division. \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ And that's because
the type and class system behind all this doesn't allow it. \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ Yes, as far as
I can tell. Did you get through the /Learn You.../ part on type
classes[fn:5]? \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ Yes, but... \\
[laughter] \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ I emailed the
professor about this and she said she'd soon go over it in detail. \\
[murmurs of acknowledgement] \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [continuing]
The bottom line --- as someone is saying in the comments --- is that
/integer/ division not the same as /fractional/ division. \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ This type and
class stuff is why [pointing at the monitor] ~4 / 2~ works and this
~(4 :: Integer) / 2~ thing doesn't. \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [typing into
the ghci REPL] Here, see?

#+name: 3f47cd5f-c4a4-4df4-8dce-3504a5178c43
#+begin_src haskell :results verbatim :exports both
4 / 2
#+end_src

#+RESULTS: 3f47cd5f-c4a4-4df4-8dce-3504a5178c43
: 2.0

@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ It knows how to
pretend it's not integer division. It goes ahead and gives you back a
decimal number. \\
[group studies the examples] \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ In her email
the professor said we shouldn't think of literal numbers like
[pointing] ~4~ and ~2~ as any sort of definite type just by itself
[typing into REPL]

#+name: 24eb9160-be03-4ab0-bab7-b7252c8b8cfb
#+begin_src haskell :results verbatim :exports both
:t 1
#+end_src

#+RESULTS: 24eb9160-be03-4ab0-bab7-b7252c8b8cfb
: 1 :: Num p => p

@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ What this is
saying is that ~1~ is /any/ number --- until you commit to using it in
a certain way. \\
@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ So we need to use
~div~ if we specifically want integer division. \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ Exactly [typing
into REPL]

#+name: 847ae734-c05f-4f88-b74f-7c738c2caf3a
#+begin_src haskell :results verbatim :exports both
(5 `div` 2)
#+end_src

#+RESULTS: 847ae734-c05f-4f88-b74f-7c738c2caf3a
: 2

@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ See? It's
rounding down and throwing away the remainder just like it should with
whole numbers [typing into REPL]

#+name: 0e161629-6359-488b-9590-4c23b7ae52c3
#+begin_src haskell :results verbatim :exports both
5 / 2
#+end_src

#+RESULTS: 0e161629-6359-488b-9590-4c23b7ae52c3
: 2.5

#+name: 463f1c65-bd1a-4633-8c79-8a93c579e907
#+begin_src haskell :results verbatim :exports both
:t (5 / 2)
#+end_src

#+RESULTS: 463f1c65-bd1a-4633-8c79-8a93c579e907
: (5 / 2) :: Fractional a => a

#+name: d6d94efe-1fbe-4157-9046-984227d134a4
#+begin_src haskell :results verbatim :exports both
:t (5 `div` 2)
#+end_src

#+RESULTS: d6d94efe-1fbe-4157-9046-984227d134a4
: (5 `div` 2) :: Integral a => a

@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ Good. I think I've
got it --- in a shaky sort of way. \\
[silence] \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ So back to the
lowest common denominator thing... \\
[laughter] \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [continuing]
$17\:$ is the amount the numerator of the original $1/15$ has to be
multiplied by to be equivalent using the new denominator $255\:$. So
now $1/15$ /is equivalent to/ $17/255\;$. Next up, for $1/85\:$ we've
got

#+name: b50f62a2-8d71-4c5c-bb5d-fcb7a7c504b5
#+begin_src haskell :results verbatim :exports both
crossMult 1 85 255
#+end_src

#+RESULTS: b50f62a2-8d71-4c5c-bb5d-fcb7a7c504b5
: 3.0

@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ [continuing on the
board] That means $1/85\:$ is equivalent to $3/255\:$, and then adding
gives us

\begin{align*}
\frac{17}{255} + \frac{3}{255} = \frac{20}{255}
\end{align*}

@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ [continuing] So we
can reduce this by factoring out $5$

\begin{align*}
\require{cancel}
\frac{\cancel{5} \cdot 4}{\cancel{5} \cdot 51} \\
\end{align*}

@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ Wait. I think
we're doing this wrong. We shouldn't need to factor out the $5\;$,
right? So the common denominator should have been just the prime $3$
times the prime $17$ because the prime $5$ should have been left
out. Both $15$ and $85$ just have one $5$ each as a factor. So if they
both have $5$ let's just leave it out.\\
[silence] \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ [continuing] So
those tables, Ute, maybe we can just subtract one table from the other
and go with whatever's left? \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [typing
calculations into the Racket command line] Not sure about that, dear
brother. My gut tells me --- and my memory too --- that no, it's not
that simple. So, just for sake of argument, if they have a common
prime factor then let's leave it out ... /if/ they're the same
exponentially. So we had both denominators with the prime factor
$5^{1}\:$. Good. We drop it. But then what if they share a prime factor
but different exponentiations of it?  What then? \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ Explain,
please. \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [typing into
Racket's REPL] So first, here's a contrived example where I know both
have $2^{2}$

#+begin_example
> (+ 1/20 1/28)
3/35
#+end_example

@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [continuing] So
$20$ is $2^{2}$ times $5\:$, and $28$ is that same $2^{2}$ times $7\;$. So
yes, we'll get rid of the $2^{2}$ --- they're the same prime factor
raised to the same exponent --- and we just multiply the $5$ and the
$7$ to get $35\:$, which is the denominator $35\;$. And the answer
Racket gives us, $3/35\;$, is in simplest form, so we know it's
right. /But/, let me try an example where there's a prime to a power
in one denominator and the same prime /to a higher power/ in the other
[she does calculations on a sheet of paper, then types into the
command line]

#+begin_example
> (+ 1/88 1/80)
21/880
#+end_example

@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [continuing] So
I've put together a situation where $80$ is $2^{4}$ times $5\;$, and $88$
is $2^{3}$ times $11\;$. And here we see $880\:$ is the smallest
denominator possible. And $21/880\;$ is in simplest form, so there's
no factoring out to get it into simpler terms. And yes, $2^{4}$ times $5$
times $11$ went into making $880\;$. \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ Yeah, I see. The
$2^{4}$ did have to go into it. And it was the $2$ with the higher
exponent. So when I said subtract one table from the other I guess I
was implying we could do exponent subtraction, like $2^{4-3}\:$, get just
the $2$ and then make up a denominator out of $2 \cdot 5 \cdot 11$ which would
/not/ have worked. Hey, should we try to write a Haskell function to
check all this?  \\
@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ Hold that thought,
not yet. And I say that because /The Haskell Road.../ has a way we
should learn. I looked at it. \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ Well, I asked
Mutti[fn:6] about this --- and she said we should look into the /least
common multiple/, because that's what this lowest common denominator
issue is all about. And yes, I knew that but had forgotten. So here's
the Wikipedia article on it[fn:7]. [displays page on monitor] \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ [mumbling the
first sentence[fn:8]] You're right. I knew this but had lost track of
it. \\
@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ Which means we
/don't/ want to kick out /any/ primes with the same exponent just
because the denominators share them. \\
[embarrassed laughter] \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [typing into
the Racket REPL] So trying $20$ and $28$ as denominators again, we
thought $35$ was the common denominator for all situations. But watch,
I'll put in some different numerators

#+begin_example
> (+ 5/20 11/28)
9/14
> (+ 1/20 11/28)
31/70
> (+ 3/20 13/28)
43/70
#+end_example

[laughter] \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ Oops. My bad. That
was a complete fluke factoring out the $2^{2}$ and just calling the
lowest common denominator $5$ times $7\:$. So the real lowest common
multiple, the smallest number that both $20$ and $28$ evenly divide
into is, in fact, $2^{2}$ times $5$ times $7\;$, which is $140\;$. \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ Now, let's get
the numerators [typing]

#+name: 2079135a-6298-46c9-9bcf-849aae02674e
#+begin_src haskell :results verbatim :exports both
crossMult 5 20 140
#+end_src

#+RESULTS: 2079135a-6298-46c9-9bcf-849aae02674e
: 35.0

#+name: 5096de0c-3d56-428d-903f-fda40984354b
#+begin_src haskell :results verbatim :exports both
crossMult 11 28 140
#+end_src

#+RESULTS: 5096de0c-3d56-428d-903f-fda40984354b
: 55.0

@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ [writing on the
board] So this is what we have

\begin{align*}
\frac{35}{140} + \frac{55}{140} = \frac{90}{140} = \frac{9}{14}
\end{align*}

and no $35$ in sight. \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ Got it. \\
[silence as they all read further into the article] \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ So yes, now I
think we should try what they're saying where you list out multiples
of the two denominators until you find the first common
multiple. Let's try it as a Haskell program. \\
[agreement murmurs] \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [making a new
org-mode source block] Okay, so we're basically talking about an
/arithmetic series/ where a sequence of numbers increases or decreases
at a fixed amount. In this case the series will increase by the amount
of the denominators at each step. So let me do this [typing]

#+name: 038c8bb2-d75b-4cde-9b0a-353f0b1e54c5
#+begin_src haskell :results silent :exports code
:{
myLCM dnom1 dnom2
  = take 1  [((*dnom1)x) | x <- [1..200],
             y <- [1..200],
             ((*dnom1)x == (*dnom2)y) ]
:}
#+end_src

@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [continuing]
Now for denominators $15$ and $85$ like before

#+name: fdc80561-7dd3-4d9d-b2dc-1f0a0c375972
#+begin_src haskell :results verbatim :exports both
myLCM 15 85
#+end_src

#+RESULTS: fdc80561-7dd3-4d9d-b2dc-1f0a0c375972
: [255]

@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [continuing] So
it works. But I don't think it's good for really big
denominators. This is strictly proof of concept. \\
[Uwe and Ute study the code] \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ Again, wow. But
you lost me on the ~(*dnom1)~ and ~(*dnom2)~. What's going on there?
\\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ That's what
they call a /section/. I got that the other day from /A Gentle
Introduction to Haskell/[fn:9]. Basically, ~*dnom1~ is made into a
function that takes whatever ~dnom1~ is and applies it just as if it
were a function to the ~x~. So ~(*dnom1)x~ is the same as just ~x *
dnom1~. Here's an example [typing into the ghci REPL]

#+name: 7753e9f5-bf4d-4320-9cf5-e39783c5ff76
#+begin_src haskell :results verbatim :exports both
(*2)5 == (2*)5 
#+end_src

#+RESULTS: 7753e9f5-bf4d-4320-9cf5-e39783c5ff76
: True

@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [continuing]
Since multiplication is commutative, the ~*~ sign can be in front of
the multiplicand or behind it. But that's not always the case. For
example [typing]

#+name: dc633a80-36c7-48ce-a3b7-e4792add362b
#+begin_src haskell :results verbatim :exports both
(2^)3
#+end_src

#+RESULTS: dc633a80-36c7-48ce-a3b7-e4792add362b
: 8

#+name: e7246775-3470-4907-a4d5-d3c75c60ffba
#+begin_src haskell :results verbatim :exports both
(^2)3
#+end_src

#+RESULTS: e7246775-3470-4907-a4d5-d3c75c60ffba
: 9

@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [continuing] So
the second one /flips/ the $3$ to the other side. Not to get too far
down this rabbit hole, I could write something like this [typing]

#+name: 3cbbac6a-d7c2-4ef6-b836-a5713885d2a8
#+begin_src haskell :results verbatim :exports both
myTimesTwo = (*2)
#+end_src

#+name: 7ce639bc-739d-4a90-a0e4-f15226daece0
#+begin_src haskell :results verbatim :exports both
myTimesTwo 5
#+end_src

#+RESULTS: 7ce639bc-739d-4a90-a0e4-f15226daece0
: 10

@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ Okay, I get
it. Impressive. \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ So here's one
more cool thing about sections. Look at this and try to guess what it
does [typing into a source block]

#+name: 617b85c6-d6a5-4532-843d-49c7f2c7dab7
#+begin_src haskell :results verbatim :exports both
myListOfAddFuncs = map (+) [1,2,3]
#+end_src

@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ Aaah, not
sure. Give us a hint. \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ Right, so
according to /The Gentle Introduction.../ we've got [writing on the
board]

#+begin_example
(+) = \x y -> x + y
#+end_example

@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ So with sections
the operator and whatever variable you include has to be in
parentheses, right? \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ Yes. We're
packaging up a common operator like plus or times, and maybe a
variable, to work as a function. \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ /Luft von anderem
Planeten/[fn:10] \\
[laughter] \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ [continuing] No,
really, I barely understand that anonymous stuff, but I hear you
saying ~myListOfAddFuncs~ could have been written with an anonymous
function [writes on the board]

#+name: d08a4d29-9155-4e38-ab84-5e9ad0756f68
#+begin_src haskell :results verbatim :exports both
myLOAF = map (\x y -> x + y) [1,2,3]
#+end_src

@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ [continuing] And
I'm guessing that this creates a /list of functions/ like [writing]

#+begin_example
[(1+),(2+),(3+)]
#+end_example

@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ So let's just
test it [typing]

#+name: ddf5d331-f8bd-4cdf-97e7-7365b572aae5
#+begin_src haskell :results verbatim :exports both
map (myListOfAddFuncs !! 2) [1,2,3]
#+end_src

#+RESULTS: ddf5d331-f8bd-4cdf-97e7-7365b572aae5
: [4,5,6]

@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ Again, I just
barely understand all these components. I sort of understand ~map~. I
sort of understand what you're doing with sections, as they're
called. I sort of understand what Brother just said. So I'm going to
guess that you have the list of functions in the form of sections, and
you just told it to apply this list of functions to the list
~[1,2,3]~. \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ Not
exactly. I'm still trying to figure that one out. No, what I'm doing
is using the Haskell index operator ~!!~ to say "give me the third
element," which is the function ~(3+)~. Even though it says ~2~, the
index starts at ~0~, so the third function in ~myListOfAddFuncs~ is
~(3+)~ and ~map~ then applies it across ~[1,2,3]~ giving ~[4,5,6]~
since it adds ~3~ to each element of the input list. See? \\
[nods and murmurs of agreement] \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ So back to the ---
list comprehension? Is that what it's called? \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ Right
[scrolling back]

#+begin_example
myLCM dnom1 dnom2
  = take 1  [((*dnom1)x) | x <- [1..200],
             y <- [1..200],
             ((*dnom1)x == (*dnom2)y) ]
#+end_example

#+name: baa68947-2797-4bc9-99d7-fb7c16cc7b0a
#+begin_src haskell :results verbatim :exports both
myLCM 15 85
#+end_src

#+RESULTS: baa68947-2797-4bc9-99d7-fb7c16cc7b0a
: [255]

@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ So this is a
/list comprehension/[fn:11], and a list comprehension is just the
Haskell version of a set comprehension or /set-builder
notation/[fn:12] from set theory. And it's going through the multiples
of $15$ and $85$, one after the other like this [writing on the board]

#+begin_example
15 30 45 60 75 90 105 120 ... 240 255
85 170 225
#+end_example

@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ [continuing]
making pairs of all these possible combinations until there's a pair
that match, that share the same multiple, which is $255\;$. \\
@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ So let's change it
a bit. What happens if you /don't/ have the filter that selects just
the equal pairs /and/ you don't take just the first one like you did
with that ~take 1~? \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ Right, I know
what you mean. Here it is [typing]. Here's all the pairs of the two
intervals in all possible combinations --- this time only the first
$15$ multiples of $15$ and $85\:$ so it doesn't get too big

#+begin_example
myLCM2 dnom1 dnom2 = [((*dnom1)x,(*dnom2)y) |
                         x <- [1..15], y <- [1..15] ]
#+end_example

#+begin_example
myLCM2 15 85
#+end_example  

#+begin_example
[(15,85),(15,170),(15,255),(15,340),(15,425),(15,510),(15,595),(15,680),
(15,765),(15,850),(15,935),(15,1020),(15,1105),(15,1190),(15,1275),
(30,85),(30,170),(30,255),(30,340),(30,425),(30,510),(30,595),(30,680),
(30,765),(30,850),(30,935),(30,1020),(30,1105),(30,1190),(30,1275),
(45,85),(45,170),(45,255),(45,340),(45,425),(45,510),(45,595),(45,680),
(45,765),(45,850),(45,935),(45,1020),(45,1105),(45,1190),(45,1275),
(60,85),(60,170),(60,255),(60,340),(60,425),(60,510),(60,595),(60,680),
(60,765),(60,850),(60,935),(60,1020),(60,1105),(60,1190),(60,1275),
(75,85),(75,170),(75,255),(75,340),(75,425),(75,510),(75,595),(75,680),
(75,765),(75,850),(75,935),(75,1020),(75,1105),(75,1190),(75,1275),
(90,85),(90,170),(90,255),(90,340),(90,425),(90,510),(90,595),(90,680),
(90,765),(90,850),(90,935),(90,1020),(90,1105),(90,1190),(90,1275),
(105,85),(105,170),(105,255),(105,340),(105,425),(105,510),(105,595),
(105,680),(105,765),(105,850),(105,935),(105,1020),(105,1105),
(105,1190),(105,1275),(120,85),(120,170),(120,255),(120,340),
(120,425),(120,510),(120,595),(120,680),(120,765),(120,850),
(120,935),(120,1020),(120,1105),(120,1190),(120,1275),(135,85),
(135,170),(135,255),(135,340),(135,425),(135,510),(135,595),(135,680),
(135,765),(135,850),(135,935),(135,1020),(135,1105),(135,1190),
(135,1275),(150,85),(150,170),(150,255),(150,340),(150,425),(150,510),
(150,595),(150,680),(150,765),(150,850),(150,935),(150,1020),(150,1105),
(150,1190),(150,1275),(165,85),(165,170),(165,255),(165,340),
(165,425),(165,510),(165,595),(165,680),(165,765),(165,850),
(165,935),(165,1020),(165,1105),(165,1190),(165,1275),(180,85),
(180,170),(180,255),(180,340),(180,425),(180,510),(180,595),(180,680),
(180,765),(180,850),(180,935),(180,1020),(180,1105),(180,1190),(180,1275),
(195,85),(195,170),(195,255),(195,340),(195,425),(195,510),(195,595),
(195,680),(195,765),(195,850),(195,935),(195,1020),(195,1105),(195,1190),
(195,1275),(210,85),(210,170),(210,255),(210,340),(210,425),(210,510),
(210,595),(210,680),(210,765),(210,850),(210,935),(210,1020),(210,1105),
(210,1190),(210,1275),(225,85),(225,170),(225,255),(225,340),(225,425),
(225,510),(225,595),(225,680),(225,765),(225,850),(225,935),(225,1020),
(225,1105),(225,1190),(225,1275)]
#+end_example

@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ Right. Wow. So
this is literally taking all combinations of the multiples of $15$ and
$85\;$, and there towards the end you can see the ~(255,255)~, which
is the very first common multiples match, which makes it the /lowest/
match. But then your original code is filtering out all the
unnecessary combinations of the multiples. \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ So with the
original code, the ~x <- [1..200]~ and the ~y <- [1..200]~ simply
you're going through $200$ of the arithmetic progression for both the
$15$ and the $85\;$, and you're creating all the different combination
pairs of these multiples of $15$ and $85\;$, the first time the
multiples are the same, you've got a winner. This time it was when it
returned $(225,225)\;$. So you just take the first parameter, which is
$15$ times all these different combinations of multiples of $15$ and
$85\;$, and with that qualifier ~(*dnom1)x == (*dnom2)y~ you're
keeping only the times you get a hit, that is, $255$ equals $255\;$
--- and then you take the first one of that list. \\
[silence while studying the code] \\
@@html:<span class="fraktur">@@𝔘𝔱𝔢:@@html:</span>@@ [dramatically] And
now, dear siblings, we can honestly say that we can solve
unlike-denominator fractions. \\
[laughter] @@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ I have
to say, when we have to pull math out of our heads and put on a
computer, it's, yeah, /involved/, to say the least. \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ But I can see the
day when we're good enough at coding to just immediately shake
something out of our sleave. \\
@@html:<span class="fraktur">@@𝔘𝔴𝔢:@@html:</span>@@ But it won't be
easy getting there. \\
[murmurs of agreement] \\
@@html:<span class="fraktur">@@𝔘𝔯𝔰𝔲𝔩𝔞:@@html:</span>@@ Take a break?
\\
[agreement]


#+INCLUDE: "./footer.org" :minlevel 1

* Footnotes

[fn:1] German for /dad/, /papa/.

[fn:2] Professor Chandra has demonstrated at the Racket command line
how rationals could be directly added, e.g., \\
~> (+ 1/32 1/943720)~ \\
and get back \\
~117969/3774880~

[fn:3] Check out anonymous or /lambda/ functions [[http://learnyouahaskell.com/higher-order-functions#lambdas][here]].

[fn:4] See [[https://stackoverflow.com/questions/35950600/why-it-is-impossible-to-divide-integer-number-in-haskell][Why it is impossible to divide Integer number in Haskell?]]

[fn:5] See [[http://learnyouahaskell.com/types-and-typeclasses#typeclasses-101][Typeclasses 101]] in /Learn You a Haskell.../.

[fn:6] German for /mom/, /mama/.

[fn:7] See the article [[https://en.wikipedia.org/wiki/Least_common_multiple][here]].

[fn:8] @@html:<font color = "#0d3db3">@@...In arithmetic and number
theory, the /least common multiple/, /lowest common multiple/, or
/smallest common multiple/ of two integers $a$ and $b\:$, usually
denoted by $lcm(a, b)\:$, is the smallest positive integer that is
divisible by both $a$ and $b\;$...@@html:</font>@@

[fn:9] Available [[https://www.haskell.org/tutorial/][here]]. The page dealing with /sections/ is [[https://www.haskell.org/tutorial/functions.html][here]] in
3.2.1. Also The [[https://wiki.haskell.org/Section_of_an_infix_operator][wiki.haskell.org]] has a page on sections as well.

[fn:10] A famous line from a Stefan Georg poem: /Ich fühle Luft von
anderem Planeten/ or /I feel (the) air of (the other) another planet./

[fn:11] See [[http://learnyouahaskell.com/starting-out#im-a-list-comprehension][this]] from LYAHFGG.

[fn:12] See Wikipedia's [[https://en.wikipedia.org/wiki/Set-builder_notation][Set-builder notation]]
